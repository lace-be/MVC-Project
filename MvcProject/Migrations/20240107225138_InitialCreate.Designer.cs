// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcProject.Data;

#nullable disable

namespace MvcProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240107225138_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Afwezigheid", b =>
                {
                    b.Property<int>("AfwezigheidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AfwezigheidId"), 1L, 1);

                    b.Property<DateTime?>("EindDatum")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("GebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDatum")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("AfwezigheidId");

                    b.HasIndex("GebruikerId");

                    b.ToTable("Afwezigheid", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Begeleiding", b =>
                {
                    b.Property<int>("BegeleidingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BegeleidingId"), 1L, 1);

                    b.Property<string>("GebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StudiebezoekId")
                        .HasColumnType("int");

                    b.HasKey("BegeleidingId");

                    b.HasIndex("GebruikerId");

                    b.HasIndex("StudiebezoekId");

                    b.ToTable("Begeleiding", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Bijlage", b =>
                {
                    b.Property<int>("BijlageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BijlageId"), 1L, 1);

                    b.Property<string>("BestandsNaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudiebezoekId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("BijlageId");

                    b.HasIndex("StudiebezoekId");

                    b.ToTable("Bijlage");
                });

            modelBuilder.Entity("MvcProject.Models.Foto", b =>
                {
                    b.Property<int>("FotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FotoId"), 1L, 1);

                    b.Property<int>("FotoAlbumId")
                        .HasColumnType("int");

                    b.Property<string>("NaamFoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FotoId");

                    b.HasIndex("FotoAlbumId");

                    b.ToTable("Foto", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.FotoAlbum", b =>
                {
                    b.Property<int>("FotoAlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FotoAlbumId"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("GebruikerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudiebezoekId")
                        .HasColumnType("int");

                    b.HasKey("FotoAlbumId");

                    b.HasIndex("GebruikerId");

                    b.HasIndex("StudiebezoekId");

                    b.ToTable("FotoAlbum", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Gebruiker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Initialen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("Verwijderd")
                        .HasColumnType("bit");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Gebruiker", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.GebruikerNavorming", b =>
                {
                    b.Property<int>("GebruikerNavormingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GebruikerNavormingId"), 1L, 1);

                    b.Property<string>("GebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NavormingId")
                        .HasColumnType("int");

                    b.HasKey("GebruikerNavormingId");

                    b.HasIndex("GebruikerId");

                    b.HasIndex("NavormingId");

                    b.ToTable("GebruikerNavorming", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Klas", b =>
                {
                    b.Property<int>("KlasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KlasId"), 1L, 1);

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Verwijderd")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("KlasId");

                    b.ToTable("Klas", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.KlasStudiebezoek", b =>
                {
                    b.Property<int>("KlasStudiebezoekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KlasStudiebezoekId"), 1L, 1);

                    b.Property<int>("KlasId")
                        .HasColumnType("int");

                    b.Property<int>("StudiebezoekId")
                        .HasColumnType("int");

                    b.HasKey("KlasStudiebezoekId");

                    b.HasIndex("KlasId");

                    b.HasIndex("StudiebezoekId");

                    b.ToTable("KlasStudiebezoek", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Navorming", b =>
                {
                    b.Property<int>("NavormingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NavormingId"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EindUur")
                        .HasColumnType("datetime2");

                    b.Property<string>("GebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAfgewerkt")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAfgewezen")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGoedgekeurdDir")
                        .HasColumnType("bit");

                    b.Property<decimal>("Kostprijs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OpmerkingAfgewezen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reden")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartUur")
                        .HasColumnType("datetime2");

                    b.HasKey("NavormingId");

                    b.HasIndex("GebruikerId");

                    b.ToTable("Navorming", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Studiebezoek", b =>
                {
                    b.Property<int>("StudiebezoekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudiebezoekId"), 1L, 1);

                    b.Property<int?>("AantalStudenten")
                        .HasColumnType("int");

                    b.Property<string>("AfwezigeStudenten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EindUur")
                        .HasColumnType("datetime2");

                    b.Property<string>("GebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsAfgewerkt")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAfgewezen")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGoedgekeurdCo")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGoedgekeurdDir")
                        .HasColumnType("bit");

                    b.Property<decimal>("KostprijsStudiebezoek")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("KostprijsVervoer")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("OpmerkingAfgewezen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opmerkingen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reden")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartUur")
                        .HasColumnType("datetime2");

                    b.Property<int>("VakId")
                        .HasColumnType("int");

                    b.Property<bool?>("VervoerAuto")
                        .HasColumnType("bit");

                    b.Property<bool?>("VervoerBus")
                        .HasColumnType("bit");

                    b.Property<bool?>("VervoerFiets")
                        .HasColumnType("bit");

                    b.Property<bool?>("VervoerTeVoet")
                        .HasColumnType("bit");

                    b.Property<bool?>("VervoerTram")
                        .HasColumnType("bit");

                    b.Property<bool?>("VervoerTrein")
                        .HasColumnType("bit");

                    b.HasKey("StudiebezoekId");

                    b.HasIndex("GebruikerId");

                    b.HasIndex("VakId");

                    b.ToTable("Studiebezoek", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Vak", b =>
                {
                    b.Property<int>("VakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VakId"), 1L, 1);

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Verwijderd")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("VakId");

                    b.ToTable("Vak", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.GebruikerRol", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("GebruikerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GebruikerRol", (string)null);
                });

            modelBuilder.Entity("MvcProject.Models.Rol", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MvcProject.Models.Afwezigheid", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", "Gebruiker")
                        .WithMany("Afwezigheden")
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gebruiker");
                });

            modelBuilder.Entity("MvcProject.Models.Begeleiding", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", "Gebruiker")
                        .WithMany("Begeleidingen")
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MvcProject.Models.Studiebezoek", "Studiebezoek")
                        .WithMany("Begeleidingen")
                        .HasForeignKey("StudiebezoekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gebruiker");

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("MvcProject.Models.Bijlage", b =>
                {
                    b.HasOne("MvcProject.Models.Studiebezoek", "Studiebezoek")
                        .WithMany("Bijlagen")
                        .HasForeignKey("StudiebezoekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("MvcProject.Models.Foto", b =>
                {
                    b.HasOne("MvcProject.Models.FotoAlbum", "FotoAlbum")
                        .WithMany("Fotos")
                        .HasForeignKey("FotoAlbumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FotoAlbum");
                });

            modelBuilder.Entity("MvcProject.Models.FotoAlbum", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", null)
                        .WithMany("FotoAlbums")
                        .HasForeignKey("GebruikerId");

                    b.HasOne("MvcProject.Models.Studiebezoek", "Studiebezoek")
                        .WithMany("FotoAlbums")
                        .HasForeignKey("StudiebezoekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("MvcProject.Models.GebruikerNavorming", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", "Gebruiker")
                        .WithMany("GebruikerNavormingen")
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcProject.Models.Navorming", "Navorming")
                        .WithMany("GebruikerNavormingen")
                        .HasForeignKey("NavormingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gebruiker");

                    b.Navigation("Navorming");
                });

            modelBuilder.Entity("MvcProject.Models.KlasStudiebezoek", b =>
                {
                    b.HasOne("MvcProject.Models.Klas", "Klas")
                        .WithMany("KlasStudiebezoeken")
                        .HasForeignKey("KlasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MvcProject.Models.Studiebezoek", "Studiebezoek")
                        .WithMany("KlasStudiebezoeken")
                        .HasForeignKey("StudiebezoekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Klas");

                    b.Navigation("Studiebezoek");
                });

            modelBuilder.Entity("MvcProject.Models.Navorming", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", "Gebruiker")
                        .WithMany("Navormingen")
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gebruiker");
                });

            modelBuilder.Entity("MvcProject.Models.Studiebezoek", b =>
                {
                    b.HasOne("MvcProject.Models.Gebruiker", "Gebruiker")
                        .WithMany("Studiebezoeken")
                        .HasForeignKey("GebruikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcProject.Models.Vak", "Vak")
                        .WithMany("Studiebezoeken")
                        .HasForeignKey("VakId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gebruiker");

                    b.Navigation("Vak");
                });

            modelBuilder.Entity("MvcProject.Models.GebruikerRol", b =>
                {
                    b.HasOne("MvcProject.Models.Rol", "Rol")
                        .WithMany("GebruikerRollen")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcProject.Models.Gebruiker", "Gebruiker")
                        .WithMany("GebruikerRollen")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null)
                        .WithOne()
                        .HasForeignKey("MvcProject.Models.GebruikerRol", "UserId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Gebruiker");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("MvcProject.Models.Rol", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithOne()
                        .HasForeignKey("MvcProject.Models.Rol", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MvcProject.Models.FotoAlbum", b =>
                {
                    b.Navigation("Fotos");
                });

            modelBuilder.Entity("MvcProject.Models.Gebruiker", b =>
                {
                    b.Navigation("Afwezigheden");

                    b.Navigation("Begeleidingen");

                    b.Navigation("FotoAlbums");

                    b.Navigation("GebruikerNavormingen");

                    b.Navigation("GebruikerRollen");

                    b.Navigation("Navormingen");

                    b.Navigation("Studiebezoeken");
                });

            modelBuilder.Entity("MvcProject.Models.Klas", b =>
                {
                    b.Navigation("KlasStudiebezoeken");
                });

            modelBuilder.Entity("MvcProject.Models.Navorming", b =>
                {
                    b.Navigation("GebruikerNavormingen");
                });

            modelBuilder.Entity("MvcProject.Models.Studiebezoek", b =>
                {
                    b.Navigation("Begeleidingen");

                    b.Navigation("Bijlagen");

                    b.Navigation("FotoAlbums");

                    b.Navigation("KlasStudiebezoeken");
                });

            modelBuilder.Entity("MvcProject.Models.Vak", b =>
                {
                    b.Navigation("Studiebezoeken");
                });

            modelBuilder.Entity("MvcProject.Models.Rol", b =>
                {
                    b.Navigation("GebruikerRollen");
                });
#pragma warning restore 612, 618
        }
    }
}
